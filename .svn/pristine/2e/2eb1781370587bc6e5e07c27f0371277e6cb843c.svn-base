/**
 * Created by chaoyue on 2017/11/24.
 */

//全局的ajax访问，处理ajax清求时sesion超时
$.ajaxSetup({
	contentType: "application/x-www-form-urlencoded;charset=utf-8",
	complete: function(XMLHttpRequest, textStatus) {
		//通过XMLHttpRequest取得响应头，sessionstatus，
		var sessionstatus = XMLHttpRequest.getResponseHeader("sessionstatus");
		if(sessionstatus == "timeout") {
			//如果超时就处理 ，指定要跳转的页面
			window.location = "/home/login";
		}
	}
}); +
function($) {
	$(function() {

		$.fn.dropdown.Constructor.prototype.change = function(e) {
			e.preventDefault();
			var $item = $(e.target),
				$select, $checked = false,
				$menu, $label;

			!$item.is('a') && ($item = $item.closest('a'));
			$menu = $item.closest('.dropdown-menu');
			$label = $menu.parent().find('.dropdown-label');
			$labelHolder = $label.text();
			$select = $item.find('input');
			$checked = $select.is(':checked');

			if($select.is(':disabled'))
				return;
			if($select.attr('type') == 'type') {

			}
			if($select.attr('type') == 'radio' && $checked)
				return;
			if($select.attr('type') == 'radio')
				$menu.find('li').removeClass('active');
			$item.parent().removeClass('active');
			!$checked && $item.parent().addClass('active');
			$select.prop("checked", !$select.prop("checked"));
			$items = $menu.find('li > a > input:checked');
			if($items.length) {
				$text = [];
				$items.each(function() {
					var $str = $(this).parent().text();
					$str && $text.push($.trim($str));
				});
				$text = $text.length < 4 ? $text.join(', ') : $text.length + ' selected';
				$label.html($text);
			} else {
				$label.html($label.data('placeholder'));
			}
		}

		// 新增feature 下拉框动态添加属性
		$.fn.dropdown.Constructor.prototype.add_item = function(e) {
			e.preventDefault();
			var $item = $(e.target),
				$select, $menu, $label, $ul, addTxt, new_id = 'num_id'

			if($item.is('input')) {
				e.stopPropagation();
				e.preventDefault();
			}

			!$item.is('li') && ($item = $item.closest('li'));

			$ul = $item.parent();
			$menu = $item.closest('.dropdown-menu');
			$label = $menu.parent().find('.dropdown-label');

			$select = $item.find('input');

			addTxt = $select.val().trim()
			if($select.attr('type') == 'text' && addTxt != '') {
				$ul.children().each(function(e) {
					var _this = $(this);
					if(_this.hasClass('active')) {
						var ipt = _this.find('input:checked');
						ipt.prop("checked", !ipt.prop("checked"))
						_this.removeClass('active')
					}
				})

				// 判断是否存在自定义属性 aid
				if($label.data("aid") === undefined) {
					$(".dropdown-select > li[class!='sel-add-item']").removeClass('dropdown-highlighted');
					$ul.append('<li class="active dropdown-highlighted"><a href="#"><input type="radio" name="d-s-r" checked>' + addTxt + '</a></li>')
					dropdownSelect();
				} else {
					$ul.append('<li class="active"><a href="#"><input type="radio" name="d-s-r" value="' + new_id + '" checked>' + addTxt + '</a></li>')
					$label.data('aid', new_id)
				}

				$label.text(addTxt);
				$select.val('')
			}

		}
		$(document).on('click.dropdown-menu', '.dropdown-select > li > a', $.fn.dropdown.Constructor.prototype.change);

		
		// do not propagate change event from the search field out of the component 输入框点击事件 不向上触发事件！！！！！
		$(document).on("click.dropdown-menu", ".txt-placeholder", function(e) {
			e.stopPropagation();
		});
		$(document).on('click.dropdown-menu', '.dropdown-select > li.sel-add-item', $.fn.dropdown.Constructor.prototype.add_item);
		// $("[data-toggle=tooltip]").tooltip();
		$(document).on('click', '[data-toggle^="class"]', function(e) {
			e && e.preventDefault();
			var $this = $(e.target),
				$class, $target, $tmp, $classes, $targets;
			!$this.data('toggle') && ($this = $this.closest('[data-toggle^="class"]'));
			$class = $this.data()['toggle'];
			$target = $this.data('target') || $this.attr('href');
			$class && ($tmp = $class.split(':')[1]) && ($classes = $tmp.split(','));
			$target && ($targets = $target.split(','));
			$targets && $targets.length && $.each($targets, function(index, value) {
				($targets[index] != '#') && $($targets[index]).toggleClass($classes[index]);
			});
			$this.toggleClass('active');
		});
		$(document).on('click', '.panel-toggle', function(e) {
			e && e.preventDefault();
			var $this = $(e.target),
				$class = 'collapse',
				$target;
			if(!$this.is('a'))
				$this = $this.closest('a');
			$target = $this.closest('.panel');
			$target.find('.panel-body').toggleClass($class);
			$this.toggleClass('active');
		});

		$(document).on('click', '.nav a', function(e) {
			var $this = $(e.target),
				$active, $ul, $li;
			$this.is('a') || ($this = $this.closest('a'));
			$li = $this.parent();
			$ul = $this.closest('ul');

			$active = $li.siblings(".active");
			$active && $active.find('> a').removeClass('active') && $active.removeClass('active').find('> ul:visible').slideUp(200);
			($li.hasClass('active') && $this.next().slideUp(200)) || $this.next().slideDown(200);
			!$ul.hasClass('sub-nav') && $li.toggleClass('active');
			$this.next().is('ul') && e.preventDefault();
		});

		$.fn.dropdown.Constructor.prototype.april_toggleContent = function(e) {
			e.preventDefault();
			var $item = $(e.target),
				$menu, $uls_chked, chked_len, $item_chked

				!$item.is('li') && ($item = $item.closest('li'));
			$menu = $item.closest('.dropdown-menu');

			$uls_chked = $menu.parent().find('.select-choices'); //选中的标志
			chked_len = $uls_chked.data('maximumsize'); //最多可选值

			$item_chked = $menu.find('.sub-content.active');

			// 清除选中
			if($item.hasClass('active')) {
				$item.removeClass('active')

				$uls_chked.find('.selected-item').each(function(e) {
					var cur_obj = $(this)
					if(cur_obj.data('id') === $item.find('span').data('id')) {
						cur_obj.remove();
						return false;
					}
				})
				return;
			}
			if(chked_len > 1 && $item_chked.length >= chked_len) return;

			//选项被禁用
			$item.hasClass('disabled') && e.stopPropagation();

			if(chked_len === 1) {
				//移除其他选中状态
				$menu.find('.sub-content.active').length && $menu.find('.sub-content.active').removeClass('active');
				$item.addClass('active')
			} else if(chked_len > 1 && $item_chked.length < chked_len) {
				!$item.hasClass('active') && $item.addClass('active')
			}

			$items = $menu.find('.sub-content.active');

			if($items.length) {
				var aid_arr = [],
					placeholder = $uls_chked.find('.tip-placeholder');

				placeholder.length && placeholder.hide();
				$uls_chked.empty().append(placeholder[0]); // 清除原有选中列表

				$items.each(function() {
					//获取当前选中的值 与 id
					var c_obj = $(this),
						$span = c_obj.find('span'),
						$str = $span.text(),
						chked_aid = $span.data('id') || 0

					chked_aid && aid_arr.push($.trim(chked_aid));

					var tpl_item = '<li class="selected-item" data-id="' + chked_aid + '"><span class="selected-name">' + $.trim($str) + '</span><i class="remove-item i-close">×</i></li>'
					$uls_chked.append(tpl_item)
				});

				// 判断是否存在自定义属性 aid
				($uls_chked.data("ids") !== undefined) && $uls_chked.data("ids", aid_arr);
			} else {
				$uls_chked.find('.tip-placeholder').show()
			}

		}

		$.fn.dropdown.Constructor.prototype.april_removeSelf = function(e) {
			e.stopPropagation();
			e.preventDefault();

			var $item = $(e.target),
				$select_li, $dropdown, $category_control, $menu, $uls_chked, $item_chked, $warn;

			!$item.is('i') && ($item = $item.closest('i'));
			$select_li = $item.parent();
			$uls_chked = $select_li.parent();
			$dropdown = $uls_chked.closest('.dropdown-toggle');
			$category_control = $dropdown.closest('.select-category-control');
			$menu = $category_control.find('.dropdown-menu');

			$warn = $dropdown.closest('.category-brand').parent().find('.warn-required');

			//找到所有选中项
			$item_chked = $menu.find('.detail-item.active');

			if($item_chked.length) {
				$item_chked.each(function() {
					var cur_obj = $(this),
						item_lab = cur_obj.find('.item-lab');

					if(item_lab && item_lab.data('id') && item_lab.data('id') === $select_li.data('id')) {
						cur_obj.removeClass('active'); //清除选中状态
						$select_li.remove();

						//联动，清除关联的被禁选的item
						var ix = cur_obj.closest(".category-row").index(),
							iy = cur_obj.index(),
							sel_category = $('#select_category'),
							sub_category = $('#sub_select_category'),
							target

						//当前元素隶属于 第一级
						// $category_control.prop('id').indexOf('sub') === -1 && clearDisable(sub_category,x_index,y_index)
						if($category_control.prop('id').indexOf('sub') === -1) {
							target = sub_category.find('.category-row').eq(ix).find('.detail-item').eq(iy);
							target.length && target.hasClass('disabled') && target.removeClass('disabled')

						} else if($category_control.prop('id').indexOf('sub') > -1) {
							//当前元素隶属于 第二级
							// $category_control.prop('id').indexOf('sub') > -1 && clearDisable(sel_category,x_index,y_index)
							target = sel_category.find('.category-row').eq(ix).find('.detail-item').eq(iy)
							target.length && target.hasClass('disabled') && target.removeClass('disabled')
						}
						return false;
					}
				})
			}
			//清除选中项后 判断是否还有选中项
			if($menu.find('.detail-item.active').length === 0) {
				$uls_chked.find('.tip-placeholder').show();
				$dropdown.hasClass('required') && $dropdown.addClass('invalid-require').removeClass('valid-require') && $warn.length && $warn.show();
				return false;
			}
		};

		$(document).on('click.dropdown-menu', '.dropdown-menu .row-nav', function(e) {
			e.stopPropagation()
		});
		$(document).on('click.dropdown-menu', '.dropdown-menu  .sel-item', $.fn.dropdown.Constructor.prototype.april_toggleContent);

		$(document).on("click.dropdown-menu", ".select-choices li > .remove-item", function(e) {
			// e.stopPropagation();
			e.preventDefault();

			var $item = $(e.target),
				$select_li, $dropdown, $category_control, $menu, $uls_chked, $item_chked

				!$item.is('i') && ($item = $item.closest('i'));
			$select_li = $item.parent();
			$uls_chked = $select_li.parent();
			$dropdown = $uls_chked.closest('.dropdown-toggle');
			$category_control = $dropdown.closest('.select-category-control');
			$menu = $category_control.find('.dropdown-menu');

			//找到所有选中项
			$item_chked = $menu.find('.sub-content.active');

			if($item_chked.length) {
				$item_chked.each(function() {
					var cur_obj = $(this),
						item_lab = cur_obj.find('.item-lab');

					if(item_lab.length && item_lab.data('id') && (item_lab.data('id') === $select_li.data('id'))) {
						cur_obj.removeClass('active'); //清除选中状态
						$select_li.remove();
						return false;
					}
				})
			}
			//清除选中项后 判断是否还有选中项
			if($menu.find('.sub-content.active').length === 0) {
				$uls_chked.find('.tip-placeholder').show();
				return false;
			}
		});
	});
}(jQuery);
function dropdownSelect() {
			$(".dropdown-select > li[class!='sel-add-item']").hover(function(e) {
				var $this = $(e.target);
				$(this).siblings().removeClass('dropdown-highlighted');
				$(this).addClass('dropdown-highlighted');
			}, function() {
				$(this).addClass('dropdown-highlighted');
			});
		}
		$(document).ready(function() {
			dropdownSelect();
		});
+
function($) {
	"use strict";
	var backdrop = '.dropdown-backdrop',
		toggle = '[data-toggle=dropdown]';

	var Dropdown = function(element) {
		var $el = $(element).on('click.bs.dropdown', this.toggle)
	};
	Dropdown.prototype.toggle = function(e) {
		var $this = $(this);
		if($this.is('.disabled, :disabled'))
			return
		var $parent = getParent($this)
		var isActive = $parent.hasClass('open')
		clearMenus();
		if(!isActive) {
			if('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
				$('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
			}
			$parent.trigger(e = $.Event('show.bs.dropdown'))
			if(e.isDefaultPrevented())
				return
			$parent
				.toggleClass('open')
				.trigger('shown.bs.dropdown')

			// 如果有输入框 则展开时被focus
			if($parent.hasClass('sel-add-group')) {
				var ipt_add = $parent.children(".dropdown-select").children(".sel-add-item");
				ipt_add.children("input").focus()

			} else $this.focus()
		}
		return false
	}
	Dropdown.prototype.keydown = function(e) {
		if(!/(38|40|27)/.test(e.keyCode))
			return
		var $this = $(this)
		e.preventDefault()
		e.stopPropagation()
		if($this.is('.disabled, :disabled'))
			return
		var $parent = getParent($this)
		var isActive = $parent.hasClass('open')
		if(!isActive || (isActive && e.keyCode == 27)) {
			if(e.which == 27)
				$parent.find(toggle).focus()
			return $this.click()
		}
		var $items = $('[role=menu] li:not(.divider):visible a', $parent)
		if(!$items.length)
			return
		var index = $items.index($items.filter(':focus'))
		if(e.keyCode == 38 && index > 0)
			index--
			if(e.keyCode == 40 && index < $items.length - 1)
				index++
				if(!~index)
					index = 0
		$items.eq(index).focus()
	}

	function clearMenus() {
		$(backdrop).remove();
		$(toggle).each(function(e) {
			var $parent = getParent($(this))
			if(!$parent.hasClass('open'))
				return
			$parent.trigger(e = $.Event('hide.bs.dropdown'))
			if(e.isDefaultPrevented())
				return
			$parent.removeClass('open').trigger('hidden.bs.dropdown')
		})
	}

	function getParent($this) {
		var selector = $this.attr('data-target')
		if(!selector) {
			selector = $this.attr('href')
			selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '')
		}
		var $parent = selector && $(selector)
		return $parent && $parent.length ? $parent : $this.parent()
	}
	var old = $.fn.dropdown
	$.fn.dropdown = function(option) {
		return this.each(function() {
			var $this = $(this)
			var data = $this.data('dropdown')
			if(!data)
				$this.data('dropdown', (data = new Dropdown(this)))
			if(typeof option == 'string')
				data[option].call($this)
		})
	}
	$.fn.dropdown.Constructor = Dropdown;
	$.fn.dropdown.noConflict = function() {
		$.fn.dropdown = old
		return this
	}
	$(document)
		.on('click.bs.dropdown.data-api', clearMenus)
		.on('click.bs.dropdown.data-api', '.dropdown form', function(e) {
			e.stopPropagation()
		})
		.on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
		.on('keydown.bs.dropdown.data-api', toggle + ', [role=menu]', Dropdown.prototype.keydown)
}(jQuery);

! function($) {
	$(function() {
		$(document).on('click', '[data-toggle="ajaxModal"]', function(e) {
			$('#ajaxModal').remove();
			e.preventDefault();
			var $this = $(this),
				$remote = $this.data('remote') || $this.attr('href'),
				$modal = $('<div class="modal" id="ajaxModal"><div class="modal-body"></div></div>');
			$('body').append($modal);
			$modal.modal();
			$modal.load($remote);
		});

		$(document).on('click', '.nav-primary a', function(e) {
			var $this = $(e.target),
				$active;
			$this.is('a') || ($this = $this.closest('a'));
			if($('.nav-vertical').length) {
				return;
			}
			$active = $this.parent().siblings(".active");
			$active && $active.find('> a').toggleClass('active') && $active.toggleClass('active').find('> ul:visible').slideUp(200);
			($this.hasClass('active') && $this.next().slideUp(200)) || $this.next().slideDown(200);
			$this.toggleClass('active').parent().toggleClass('active');
			$this.next().is('ul') && e.preventDefault();
		});
		$(document).on('click.bs.dropdown.data-api', '.dropdown .on, .dropup .on', function(e) {
			e.stopPropagation()
		});
	});
}(jQuery);

+
function($) {
	"use strict";
	var Modal = function(element, options) {
		this.options = options
		this.$element = $(element)
		this.$backdrop = this.isShown = null
		if(this.options.remote)
			this.$element.load(this.options.remote)
	}
	Modal.DEFAULTS = {
		backdrop: true,
		keyboard: true,
		show: true
	}
	Modal.prototype.toggle = function(_relatedTarget) {
		return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
	}
	Modal.prototype.show = function(_relatedTarget) {
		var that = this
		var e = $.Event('show.bs.modal', {
			relatedTarget: _relatedTarget
		})
		this.$element.trigger(e)
		if(this.isShown || e.isDefaultPrevented())
			return
		this.isShown = true
		this.escape()
		this.$element.on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))
		this.backdrop(function() {
			var transition = $.support.transition && that.$element.hasClass('fade')
			if(!that.$element.parent().length) {
				that.$element.appendTo(document.body)
			}
			that.$element.show()
			if(transition) {
				that.$element[0].offsetWidth
			}
			that.$element
				.addClass('in')
				.attr('aria-hidden', false)
			that.enforceFocus()
			var e = $.Event('shown.bs.modal', {
				relatedTarget: _relatedTarget
			})
			transition ? that.$element.find('.modal-dialog')
				.one($.support.transition.end, function() {
					that.$element.focus().trigger(e)
				})
				.emulateTransitionEnd(300) : that.$element.focus().trigger(e)
		})
	}
	Modal.prototype.hide = function(e) {
		if(e)
			e.preventDefault()
		e = $.Event('hide.bs.modal')
		this.$element.trigger(e)
		if(!this.isShown || e.isDefaultPrevented())
			return
		this.isShown = false
		this.escape()
		$(document).off('focusin.bs.modal')
		this.$element
			.removeClass('in')
			.attr('aria-hidden', true)
			.off('click.dismiss.modal')
		$.support.transition && this.$element.hasClass('fade') ? this.$element
			.one($.support.transition.end, $.proxy(this.hideModal, this))
			.emulateTransitionEnd(300) : this.hideModal()
	}
	Modal.prototype.enforceFocus = function() {
		$(document)
			.off('focusin.bs.modal')
			.on('focusin.bs.modal', $.proxy(function(e) {
				if(this.$element[0] !== e.target && !this.$element.has(e.target).length) {
					this.$element.focus()
				}
			}, this))
	}
	Modal.prototype.escape = function() {
		if(this.isShown && this.options.keyboard) {
			this.$element.on('keyup.dismiss.bs.modal', $.proxy(function(e) {
				e.which == 27 && this.hide()
			}, this))
		} else if(!this.isShown) {
			this.$element.off('keyup.dismiss.bs.modal')
		}
	}
	Modal.prototype.hideModal = function() {
		var that = this
		this.$element.hide()
		this.backdrop(function() {
			that.removeBackdrop()
			that.$element.trigger('hidden.bs.modal')
		})
	}
	Modal.prototype.removeBackdrop = function() {
		this.$backdrop && this.$backdrop.remove()
		this.$backdrop = null
	}
	Modal.prototype.backdrop = function(callback) {
		var that = this
		var animate = this.$element.hasClass('fade') ? 'fade' : ''
		if(this.isShown && this.options.backdrop) {
			var doAnimate = $.support.transition && animate
			this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
				.appendTo(document.body)
			this.$element.on('click.dismiss.modal', $.proxy(function(e) {
				if(e.target !== e.currentTarget)
					return
				this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this)
			}, this))
			if(doAnimate)
				this.$backdrop[0].offsetWidth
			this.$backdrop.addClass('in')
			if(!callback)
				return
			doAnimate ? this.$backdrop
				.one($.support.transition.end, callback)
				.emulateTransitionEnd(150) : callback()
		} else if(!this.isShown && this.$backdrop) {
			this.$backdrop.removeClass('in')
			$.support.transition && this.$element.hasClass('fade') ? this.$backdrop
				.one($.support.transition.end, callback)
				.emulateTransitionEnd(150) : callback()
		} else if(callback) {
			callback()
		}
	}
	var old = $.fn.modal
	$.fn.modal = function(option, _relatedTarget) {
		return this.each(function() {
			var $this = $(this)
			var data = $this.data('bs.modal')
			var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)
			if(!data)
				$this.data('bs.modal', (data = new Modal(this, options)))
			if(typeof option == 'string')
				data[option](_relatedTarget)
			else if(options.show)
				data.show(_relatedTarget)
		})
	}
	$.fn.modal.Constructor = Modal
	$.fn.modal.noConflict = function() {
		$.fn.modal = old
		return this
	}
	$(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function(e) {
		var $this = $(this)
		var href = $this.attr('href')
		var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, '')))
		var option = $target.data('modal') ? 'toggle' : $.extend({
			remote: !/#/.test(href) && href
		}, $target.data(), $this.data())
		e.preventDefault()
		$target
			.modal(option, this)
			.one('hide', function() {
				$this.is(':visible') && $this.focus()
			})
	})
	$(document)
		.on('show.bs.modal', '.modal', function() {
			$(document.body).addClass('modal-open')
		})
		.on('hidden.bs.modal', '.modal', function() {
			$(document.body).removeClass('modal-open')
		})
}(jQuery);

! function($) {
	"use strict";

	function transitionEnd() {
		var el = document.createElement('bootstrap')
		var transEndEventNames = {
			'WebkitTransition': 'webkitTransitionEnd',
			'MozTransition': 'transitionend',
			'OTransition': 'oTransitionEnd otransitionend',
			'transition': 'transitionend'
		}
		for(var name in transEndEventNames) {
			if(el.style[name] !== undefined) {
				return {
					end: transEndEventNames[name]
				}
			}
		}
	}
	$.fn.emulateTransitionEnd = function(duration) {
		var called = false,
			$el = this
		$(this).one($.support.transition.end, function() {
			called = true
		})
		var callback = function() {
			if(!called)
				$($el).trigger($.support.transition.end)
		}
		setTimeout(callback, duration)
		return this
	}
	$(function() {
		$.support.transition = transitionEnd()
	})
}(jQuery);

//(function($){
//  $(window).on("load.hashchange",function(){
//      $(".m-nav-primary .nav-item > a").each(function(e){
//          var cur = $(this)
//
//          if(cur.is('a')){
//              if( new RegExp($(this).attr("href")).test(location[$(this).attr("data-match")||"href"])){
//                  cur.parent().addClass("active")
//              }else{
//                  cur.parent().removeClass("active")
//              }
//          }
//      });
//  });
//})(jQuery);


$(document).ready(function() {
	$("#menu_header").load("/商户自助平台new2/common/header.html");
	$("#nav").load("/商户自助平台new2/common/nav.html");
});

function quanxuan(a, b) {
	var ck = $("." + b);
	for(var i = 0; i < ck.length; i++) {
		if(a.checked) {
			//			ck[i].setAttribute("checked", "checked");
			ck.eq(i).prop("checked", true);
		} else {
			//			ck[i].removeAttribute("checked");
			ck.eq(i).removeAttr("checked");
		}
	}
}

function subquanxuan1(supItem, subItem) {
	var flage1 = true;
	for(var i = 0; i < $("." + subItem + " input[type=checkbox]").length; i++) {
		if(!$($("." + subItem + " input[type=checkbox]")[i]).is(":checked")) {
			flage1 = false;
			break;
		} else {
			flage1 = true;
		}
	}
	$("." + supItem).prop("checked", flage1);
}
//当子元素都选全选选中，其中一个不选取消全选
function subquanxuan(supItem, subItem) {
	$("." + subItem + " input[type=checkbox]").click(function() {
		var flage1 = true;
		for(var i = 0; i < $("." + subItem + " input[type=checkbox]").length; i++) {
			if(!$($("." + subItem + " input[type=checkbox]")[i]).is(":checked")) {
				flage1 = false;
				break;
			} else {
				flage1 = true;
			}
		}
		$("." + supItem).prop("checked", flage1);
	})
}
//$(".is-zhekou").on('click', 'button', function() {
//	var $this = $(this);
//	$this.siblings().removeClass('active');
//	$this.addClass('active');
//})

$(document).on('click', '.is-zhekou button', function() {
	var $this = $(this);
	$this.siblings().removeClass('active');
	$this.addClass('active');
	var btnYes = $this.parent().children(".btn-yes");
	var bookingSum = $this.parent().next().find(".booking-sum");
	if(btnYes.hasClass("active")) {
		bookingSum.removeAttr("readonly");
	} else {
		bookingSum.attr("readonly", "readonly");
	}
})

window.onresize = function() {
	//当窗口重绘，重新适应宽度
	tableWrapperHeight();
	autoWidth();
}
window.onload = function() {
	//页面加载完毕，表头表的自适应宽度
	tableWrapperHeight();
	autoWidth();
}
$(document).ready(function(){
	tableWrapperHeight();
	autoWidth();
})
//table滚动
function autoWidth() {
	var fixedTh = $(".fixed-table-header .table-th");
	var actualTh = $(".actual-table-header .table-th")
	var deskContent = $(".desks-content").width();
//	$(".fixed-table-header").width($(".actual-table-header").width());
//	$(".table-wrapper").width($(".actual-table-header").width());
	$(".table-wrapper").css("minWidth", deskContent);
	if($(".actual-table-header").height() > $(".desks-content .table-wrapper").height()) {
		$(".fixed-table-header").css("minWidth", deskContent - 7);
	} else {
		$(".fixed-table-header").css("minWidth", deskContent);
	}
	for(var i = 0; i < fixedTh.length; i++) {
		fixedTh.eq(i).width(actualTh.eq(i).width());
	}
}
function tableWrapperHeight() {
	//	var scrollWidth1 = $(".table-wrapper").width() - $(".actual-table-header").outerWidth();
	var tableWrapperHeight = $(".management-right").outerHeight() - $(".management-right .title ").outerHeight() - $(".management-right .tool-bar ").outerHeight() - $(".desks-bottom").outerHeight() - 7;
	//	$(".desks-content").height(tableWrapperHeight);
	//	$(".desks-content").css("maxHeight",tableWrapperHeight);
	$(".table-wrapper").css("maxHeight", tableWrapperHeight);
}

//滑动条
//(function($) {
//	scrollWidth1 = $(".table-wrapper").width() - $(".actual-table-header").outerWidth();
//	paddingRight1 = (15 + scrollWidth1) + "px";
//	$(".fixed-table-header").css("paddingRight", scrollWidth1);
//})(jQuery);


$(document).ready(function() {
	tabSlide();
	tabPaneHeight();
})
window.onresize = function() {
	tabSlide();
	tabPaneHeight();
}
window.onload = function() {
	tabSlide();
	tabPaneHeight();
}
//(function($) {
	//tab滑动
	tabSlide();
//	$(window).resize(function() {
//		//调整窗口大小时显示
//		tabSlide();
//		tabPaneHeight();
//	});

	function tabSlide() {
		var tabWidth = $(".tab-nav").eq(0).outerWidth();
		var tabContentWidth = $(".tab-content").outerWidth();
		var tabpaneContentWidth = $(".tab-content .tab-pane").eq(0).outerWidth();

		$(".line").outerWidth(tabWidth);
		var curLeft = $(".line").css("left");

		var isMouseOver = true; //控制鼠标移上移下事件和click事件的冲突
		$(".tab-nav").hover(function() {
			isMouseOver = true;
			//				var i = $(this).index();
			//				var leftWidth = tabWidth * i + "px";
			//				$(".line").css("left", leftWidth);
		}, function() {
			if(isMouseOver) {
				$(".line").css("left", curLeft);
			}
		})
		var setTranslateX = function(translateX) {
			$(".tab-content>.tab-pane").css({
				"transform": "translateX(" + translateX + "px)",
				"webkitTransform": "translateX(" + translateX + "px)",
			});
		}
		var i = $(".tab-nav.active").index();
		slideWidth(i);

		function slideWidth(i) {
			var leftWidth = tabWidth * i + "px";
			curLeft = leftWidth;
			$(".line").css("left", leftWidth);
			setTranslateX(-i * tabpaneContentWidth);
		}
		$(document).on("click", ".tab-nav", function() {
			isMouseOver = false;
			var i = $(this).index();
			slideWidth(i);
			tabPaneHeight();
		})

		//		$(".tab-nav").on("click", function() {
		//			debugger;
		//			isMouseOver = false;
		//			var i = $(this).index();
		//			slideWidth(i);
		//			tabPaneHeight();
		//		})

	}

//})(jQuery);



function tabPaneHeight() {
	if($(".tab-pane.active .tab-form").outerHeight() > $(".tab-content").height()) {
		$(".menu-container .tab-content>.tab-pane.active").css("height", "100%");
	} else {
		$(".menu-container .tab-content>.tab-pane.active").css("height", "fit-content");
	}
}

//新增打印机-菜品选择
$(document).on("click", ".menu-type>.type-list li", function() {
	$(this).siblings("li").removeClass("active");
	$(this).addClass("active");
})